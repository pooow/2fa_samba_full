---
- name: Generate CA
  hosts: ad
  remote_user: user

  vars:
  vars_files:
    - vars.yml

  tasks:

    - name: Remove demoCA
      shell: rm -rf demoCA

    - name: Create demoCA folder
      shell: mkdir -pv demoCA/{certs,newcerts,private}
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stdout_lines }}"

    - shell: touch demoCA/index.txt
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stdout_lines }}"
    - shell: echo "01" > demoCA/serial
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stdout_lines }}"

    - name: Create CA key
      shell: >
        openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048
        -outform PEM -out demoCA/private/cakey.pem
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stderr_lines }}"

    - name: Create CA cert
      shell: |
        openssl req -new -x509 -key demoCA/private/cakey.pem -out demoCA/certs/cacert.pem \
        -extensions v3_ca -days +3650 -outform PEM \
        -subj "/C=RU/ST=Moscow/O={{ REALM }}/CN=CA"
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stderr_lines }}"


    - name: Create KDC key
      shell: openssl genrsa -out demoCA/private/dc-key.pem 2048
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stderr_lines }}"

    - name: Create KDC req
      shell: |
        openssl req -new -out demoCA/dc-req.csr -key demoCA/private/dc-key.pem \
        -subj "/C=RU/ST=Moscow/O={{ REALM }}/CN={{ ad_srv_shortname }}.{{ domain }}"
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stderr_lines }}"

        #    - name: Create extension_file_KDC


    - name: Create (copy) extension file for KDC cert
      copy:
        dest: "demoCA/{{ extension_file_KDC }}"
        content: |
          [kdc_cert]
          basicConstraints=CA:FALSE
          keyUsage=nonRepudiation,digitalSignature,keyEncipherment,keyAgreement
          extendedKeyUsage=1.3.6.1.5.2.3.5
          subjectKeyIdentifier=hash
          authorityKeyIdentifier=keyid,issuer
          issuerAltName=issuer:copy
          subjectAltName=otherName:1.3.6.1.5.2.2;SEQUENCE:kdc_princ_name
          authorityInfoAccess    = OCSP;URI:http://{{ ad_srv_shortname }}.{{ domain }}

          [kdc_princ_name]
          realm=EXP:0,GeneralString:${ENV::REALM}
          principal_name=EXP:1,SEQUENCE:kdc_principal_seq

          [kdc_principal_seq]
          name_type=EXP:0,INTEGER:1
          name_string=EXP:1,SEQUENCE:kdc_principals

          [kdc_principals]
          princ1=GeneralString:krbtgt
          princ2=GeneralString:${ENV::REALM}
      register: out
    - ansible.builtin.debug:
        msg:
          #          - "register.cmd: {{ out.cmd }}"
          - "{{ out }}"


    - name: Create KDC cert
      ansible.builtin.shell: >
        env REALM={{ REALM }} openssl ca -batch -in demoCA/dc-req.csr
        -out demoCA/certs/dc-cert.pem
        -cert demoCA/certs/cacert.pem -extfile demoCA/{{ extension_file_KDC }}
        -extensions kdc_cert
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stderr_lines }}"

    - name: Check tokens
      ansible.builtin.shell: pkcs11-tool --module /usr/lib64/p11-kit-proxy.so -T
      register: out
    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ out.cmd }}"
          - "{{ out.stdout_lines }}"


    - name: Get cert on tokens
      ansible.builtin.shell: >
        pkcs11-tool --module /usr/lib64/p11-kit-proxy.so --list-object --type cert
        --token-label {{ item.label_slot }}
      loop: "{{ token }}"
      register: certs_on_tokens

    - debug:
        msg:
          - "{{ certs_on_tokens.results | map(attribute='cmd') | list }}"
          - "{{ certs_on_tokens.results | map(attribute='stdout_lines') | list }}"


    - name: Get keys on tokens
      ansible.builtin.shell: >
        pkcs11-tool --module /usr/lib64/p11-kit-proxy.so --list-object --type pubkey
        --token-label {{ item.label_slot }}
      loop: "{{ token }}"
      loop_control:
        extended: true
      register: keys_on_tokens

    - debug:
        msg:
          - "{{ keys_on_tokens.results | map(attribute='cmd') | list }}"
          - "{{ keys_on_tokens.results | map(attribute='stdout_lines') | list }}"

        #    - name: "Set variables"
        #      set_fact:
        #        del_keys: "{{ token | zip (keys_on_tokens.results) | product(['pubkey','privkey']) | list }}"
        #
        #    - debug: var=del_keys.id_cert
        #    - debug: var=del_keys.1
        #    - debug: var=del_keys.0.1
        #    - debug: var=del_keys.1.1
        #
        #    - name: Output
        #      debug:
        #        var:
        #          - item.1
        #      loop: "{{ del_keys }}"
        #      loop_control:
        #        index_var: my_idx
        #
        #      #"del_keys.0.1": "pubkey"
        #
        #    - meta: end_play



        #    - name: Give me list combo of three lists for delete keys on token
        #      ansible.builtin.debug:
        #        msg: "{{ token | zip (keys_on_tokens.results) | product(['pubkey','privkey']) | list }}"

    - name: Delete old pub keys on rutoken
      ansible.builtin.shell: >
        pkcs11-tool --module /usr/lib64/p11-kit-proxy.so --pin {{ item.0.pin }}
        --login --delete-object --type pubkey --id {{ item.0.id_cert }}
        --token-label {{ item.0.label_slot }}
      loop: "{{ token | zip (keys_on_tokens.results) | list }}"
      when: (item.0.id_cert|string in item.1.stdout) and
            (regen_keys_on_token == "yes")
      register: del_pub_keys_on_tokens
      tags: skipskip

    - debug:
        msg:
          - "{{ del_pub_keys_on_tokens.results | map(attribute='cmd') | list }}"
          - "{{ del_pub_keys_on_tokens.results | map(attribute='stdout_lines') | list }}"
      when: del_pub_keys_on_tokens is defined



    - name: Delete old priv keys on tokens
      ansible.builtin.shell: >
        pkcs11-tool --module /usr/lib64/p11-kit-proxy.so --pin {{ item.0.pin }}
        --login --delete-object --type privkey --id {{ item.0.id_cert }}
        --token-label {{ item.0.label_slot }}
      loop: "{{ token | zip (keys_on_tokens.results) | list }}"
      when: (item.0.id_cert|string in item.1.stdout) and
            (regen_keys_on_token == "yes")
      register: del_priv_keys_on_tokens

    - debug: var=del_priv_keys_on_tokens

    - debug:
        msg:
          - "{{ del_priv_keys_on_tokens.results | map(attribute='cmd') | list }}"
          - "{{ del_priv_keys_on_tokens.results | map(attribute='stdout_lines') | list }}"
          - "item.skipped is: {{ del_priv_keys_on_tokens.results | map(attribute='skipped') | list }}"
          - "item.changed is: {{ del_priv_keys_on_tokens.results | map(attribute='changed') | list }}"
      when: del_priv_keys_on_tokens is defined



    - name: Generate keys for users on tokens
      ansible.builtin.shell: >
        pkcs11-tool --module /usr/lib64/p11-kit-proxy.so -p {{ item.0.pin }} -l
        --keypairgen --key-type rsa:{{ item.0.keySize }} --id {{ item.0.id_cert }}
        --label {{ item.0.label_cert }}
        --token-label {{ item.0.label_slot }}
      when: ((not item.0.id_cert|string in item.1.stdout) and
            (not item.0.label_cert in item.1.stdout)) or
            (item.2.changed)
      loop: "{{ token | zip (keys_on_tokens.results, del_priv_keys_on_tokens.results) | list }}"
      register: gen_keys

    - debug:
        msg:
          - "{{ gen_keys.results | map(attribute='cmd') | list }}"
          - "{{ gen_keys.results | map(attribute='stdout_lines') | list }}"
      loop: "{{ gen_keys.results }}"
      when: item.changed


    - name: Delete old cert with label match
      ansible.builtin.shell: >
        pkcs11-tool --module /usr/lib64/p11-kit-proxy.so -p {{ item.0.pin }} -l
        --delete-object --type cert --id {{ item.0.id_cert }}
        --token-label {{ item.0.label_slot }}
      when: item.0.label_cert in item.1.stdout
      loop: "{{ token | zip (certs_on_tokens.results) | list }}"
      register: reg

    - debug:
        msg:
          - "{{ reg.results | map(attribute='cmd') | list }}"
          - "{{ reg.results | map(attribute='stdout_lines') | list }}"
      when: reg is defined


    - name: Create request cert for users
      ansible.builtin.shell: >
        openssl req -new -out demoCA/{{ item.smb_user }}.csr -keyform engine
        -engine pkcs11 -key "pkcs11:token={{ item.label_slot }};object={{ item.label_cert }}"
        -passin pass:{{ item.pin }}
        -subj "/C=RU/ST=Moscow/O={{ REALM }}/CN={{ item.smb_user }}"
      loop: "{{ token }}"
      register: gen_cert_req

    - debug:
        msg:
          - "{{ gen_cert_req.results | map(attribute='cmd') | list }}"
          - "{{ gen_cert_req.results | map(attribute='stderr_lines') | list }}"
      when: gen_cert_req is defined

    - name: Создаем файл расширений (extensions) сертификата, для пользователя домена
      copy:
        dest: "demoCA/{{ extension_file_user }}"
        content: |
          [ kdc_user ]
          basicConstraints       = CA:FALSE
          keyUsage               = nonRepudiation, digitalSignature, keyEncipherment
          subjectKeyIdentifier   = hash
          authorityKeyIdentifier = keyid,issuer
          subjectAltName         = otherName:1.3.6.1.4.1.311.20.2.3;UTF8:${ENV::NAME}@${ENV::REALM}
          issuerAltName          = issuer:copy
          extendedKeyUsage       = clientAuth,1.3.6.1.4.1.311.20.2.2
          authorityInfoAccess    = OCSP;URI:http://{{ ad_srv_shortname }}.{{ domain }}


    - name: Issue cert for users
      ansible.builtin.shell: >
        env REALM={{ REALM }} NAME={{ item.smb_user }} openssl ca -batch -in demoCA/{{ item.smb_user }}.csr
        -out demoCA/certs/{{ item.smb_user }}.pem -cert demoCA/certs/cacert.pem
        -extfile demoCA/{{ extension_file_user }} -extensions kdc_user
      loop: "{{ token }}"
      register: gen_cert_users

    - debug:
        msg:
          - "{{ gen_cert_users.results | map(attribute='cmd') | list }}"
          - "{{ gen_cert_users.results | map(attribute='stderr_lines') | list }}"
      when: gen_cert_users is defined

    - name: Copy cert for user on token
      ansible.builtin.shell: >
        pkcs11-tool --module /usr/lib64/p11-kit-proxy.so -p {{ item.pin }} -l
        --write-object ./demoCA/certs/{{ item.smb_user }}.pem --type cert
        --id {{ item.id_cert }} --label {{ item.label_cert }}
        --token-label {{ item.label_slot }}
      loop: "{{ token }}"
      register: reg

    - debug: "var=reg"
    - debug:
        msg:
          - "{{ reg.results | map(attribute='cmd') | list }}"
          - "{{ reg.results | map(attribute='stdout_lines') | list }}"
        #    - debug: "var=reg.results.{{item}}.cmd"
        #      with_sequence: "0-{{ reg.results|length - 1}}"


    - name: Create OCSP key
      ansible.builtin.shell: >
        openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048
        -outform PEM -out demoCA/private/ocsp-key.pem
      register: reg

    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ reg.cmd }}"
          - "{{ reg.stderr_lines }}"

    - name: Создаем файл расширений (extensions) сертификата службы OCSP
      copy:
        dest: "demoCA/{{ extension_file_ocsp }}"
        content: |
          [ ocsp ]
          # Extension for OCSP signing certificates (`man ocsp`).
          basicConstraints = CA:FALSE
          subjectKeyIdentifier = hash
          authorityKeyIdentifier = keyid,issuer
          keyUsage = critical, digitalSignature
          extendedKeyUsage = critical, OCSPSigning
      register: reg
    - debug: "var=reg"


    - name: Create OCSP req
      ansible.builtin.shell: >
        openssl req -new -out demoCA/ocsp-req.csr -key demoCA/private/ocsp-key.pem
        -subj "/C=RU/ST=Moscow/O={{ REALM }}/CN={{ ocsp_srv_shortname }}.{{ domain }}"
      register: reg

    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ reg.cmd }}"
          - "{{ reg.stderr_lines }}"


    - name: Create OCSP cert
      ansible.builtin.shell: >
        env REALM={{ REALM }} openssl ca -batch -in demoCA/ocsp-req.csr
        -out demoCA/certs/ocsp-cert.pem -cert demoCA/certs/cacert.pem
        -extfile demoCA/{{ extension_file_ocsp }} -extensions ocsp
      register: reg

    - ansible.builtin.debug:
        msg:
          - "register.cmd: {{ reg.cmd }}"
          - "{{ reg.stderr_lines }}"


    - name: Remove old certs and keys from Samba
      become: yes
      ansible.builtin.file:
        path: /var/lib/samba/private/tls/
        state: absent
      register: reg
    - debug: "var=reg"


    - name: Create tls folder from Samba
      become: yes
      ansible.builtin.file:
        path: /var/lib/samba/private/tls
        state: directory
      register: reg
    - debug: "var=reg"

    - name: Copy CA cert to samba
      become: yes
      ansible.builtin.copy:
        src: demoCA/certs/cacert.pem
        dest: /var/lib/samba/private/tls/cacert.pem
        remote_src: yes
      register: reg
    - debug: "var=reg"

    - name: Copy DC key to samba
      become: yes
      ansible.builtin.copy:
        src: demoCA/private/dc-key.pem
        dest: /var/lib/samba/private/tls/dc-key.pem
        mode: 0600
        remote_src: yes
      register: reg
    - debug: "var=reg"

    - name: Copy DC cert to samba
      become: yes
      ansible.builtin.copy:
        src: demoCA/certs/dc-cert.pem
        dest: /var/lib/samba/private/tls/dc-cert.pem
        remote_src: yes
      register: reg
    - debug: "var=reg"

    - name: Add TLS to smb.conf
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/samba/smb.conf
        state: present
        insertbefore: "\\[sysvol\\]"
        block: |2
                  tls enabled = yes
                  tls certfile = /var/lib/samba/private/tls/dc-cert.pem
                  tls keyfile = /var/lib/samba/private/tls/dc-key.pem
                  tls cafile = /var/lib/samba/private/tls/cacert.pem
        backup: yes
      register: reg
    - debug: "var=reg"
          #      \\ - escape character
          #      |2 - add whitespaces at start, like in block. “Yaml Block Indentation Indicator”


    - name: Add pkinit to kerberos on samba AD 1
      become: yes
      ansible.builtin.lineinfile:
        path: /etc/krb5.conf
        state: present
        insertafter: "dns_lookup_kdc"
        line: '         pkinit_anchors = FILE:/var/lib/samba/private/tls/cacert.pem'
      register: reg
    - debug: "var=reg"

    - name: Add pkinit to kerberos on samba AD 2
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/krb5.conf
        state: present
        insertafter: EOF
        block: |
          [kdc]
          enable-pkinit = yes
          pkinit_identity = FILE:/var/lib/samba/private/tls/dc-cert.pem,/var/lib/samba/private/tls/dc-key.pem
          pkinit_anchors = FILE:/var/lib/samba/private/tls/cacert.pem
          pkinit_principal_in_certificate = yes
          pkinit_win2k_require_binding = yes
        backup: yes
      register: reg
    - debug: "var=reg"

    - name: Reload Samba after edit krb5.conf.
      become: yes
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: samba.service
      register: reg
    - debug: "var=reg"


    - name: Check Samba AD user exist
      become: yes
      ansible.builtin.shell: samba-tool user list
      register: reg

    - debug:
        msg:
          - "register.cmd: {{ reg.cmd }}"
          - "{{ reg.stdout_lines }}"
          - "{{ reg.stdout }}"


    - name: Delete Samba AD user if it exist
      become: yes
      ansible.builtin.shell: >
        samba-tool user delete {{ item.smb_user }}
      when: item.smb_user in reg.stdout
      loop: "{{ token }}"
      register: reg2

    - name: Debug Delete Samba AD user if it exist
      debug:
        msg:
          - "{{ reg2.results | map(attribute='cmd') | list }}"
          - "{{ reg2.results | map(attribute='stdout_lines') | list }}"
      when: reg2 is defined


    - name: Create Samba AD user
      become: yes
      ansible.builtin.shell: >
         samba-tool user create {{ item.smb_user }} {{ smb_user_pass }}
         --given-name={{ item.name }}
      loop: "{{ token }}"
      register: reg

    - debug:
        msg:
          - "{{ reg.results | map(attribute='cmd') | list }}"
          - "{{ reg.results | map(attribute='stdout_lines') | list }}"
